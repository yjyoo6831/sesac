<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>

    <!-- jQuery CDN (ajax 간편하게 사용하고자 불러옴) -->
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"
        integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
    <!-- axios -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>

<body>
    <h1>
        <%= title %>
    </h1>
    <form name="register">
        <label for="name">이름</label>
        <input type="text" name="name" id="name" required>
        <br>
        <span>성별</span>
        <input type="radio" name="gender" id="male" value="남자" required>
        <label for="male">남자</label>
        <input type="radio" name="gender" id="female" value="여자">
        <label for="female">여자</label>
        <br>

        <button type="button" onclick="ajaxGet()">ajax GET 방식 요청</button>
        <button type="button" onclick="ajaxPost()">ajax POST 방식 요청</button>
        <button type="button" onclick="axiosGet()">axios Get 방식 요청</button>
        <button type="button" onclick="axiosPost()">axios POST 방식 요청</button>
        <button type="button" onclick="fetchGet()">fetch Get 방식 요청</button>
        <button type="button" onclick="fetchPost()">fetch POST 방식 요청</button>
        <p id="text"></p>
    </form>

    <div class="result"></div>
</body>

</html>

<script>
    const resultBox = document.querySelector('.result');

    function ajaxGet() {
        console.log("ajaxGet() click");

        //폼 선택하기 
        const form = document.forms['register'];

        //폼 요소의 값을 추출하기 
        console.dir(form);
        console.dir(form.name); //이름 input 에 작성된 문자열
        console.dir(form.gender.value)  // 성별 input 이 선택된 값

        // 서버로 보낼 데이터 양식 선택하기 
        const data1 = {
            name: form.name.value,
            gender: form.gender.value
        }


        //ajax 비동기 통신(GET 방식) - (서버의 index.js 파일로 유저가 브라우저에 입력한 값을 보내기)

        $.ajax({
            type: 'GET',
            url: '/ajax', //
            data: data1, // data:data    value 의 data 는 위에 지정한 data 변수  // data={ name :form.name.value, gender : form.gender.value }
            success: function (data) {
                console.log(data);
                resultBox.textContent = `GET /ajax 요청에 대한 응답 완료! \n ${data1.name} 님은 ${data1.gender} 이다.`;
                resultBox.style.color = 'blue';
            }
        })

    }

    function ajaxPost() {
        console.log("ajaxPost() clicked");
        const form = document.forms['register'];

        const data = {
            name: form.name.value,
            gender: form.gender.value
        };
        $.ajax({
            type: "post",
            url: "/ajax",
            data,
            success: function (data) {
                console.log(data);
                resultBox.textContent = `POST /ajax 요청에 대한 응답 완료! \n ${data.name} 님은 ${data.gender} 이다.`;
                resultBox.style.color = 'green';
            }

        })
    }




    //  axios  : promise 형태 , axios 가 json을 js obj 로 자동 변환한다. 
    function axiosGet() {
        console.log("axiosGet() clicked");
        const form = document.forms['register'];

        const data = {
            name: form.name.value,
            gender: form.gender.value
        };
        //axios 비동기 통신 (get 방식)
        // 1. 이름 미입력 ; '이름을 입력해주세요 ! '
        // 2. 성별 미입력 ; '성별을 선택해주세요!'
        // 3. 이름과 성별에 모두 입력되엇다면, 정상적으로 요청 날리기

        const name = document.getElementById("name");
        const gender = document.getElementsByName("gender")[0];
        const gender1 = document.getElementsByName("gender")[1];
        if (!name.checkValidity()) {
            document.getElementById('text').innerHTML = name.validationMessage;
        }
        if (!gender.checkValidity() || !gender1.checkValidity()) {
            document.getElementById('text').innerHTML = gender.validationMessage;
            
            console.log(form.name.checkValidity());        
            console.log(gender.checkValidity());  
            console.log(gender1.checkValidity());  
        }

        else {
            axios({
                method: "get",
                // 1. params 키를 이용하지 않는다면 요청 url에 query string 작성
                url: `/axios?name=${form.name.value}&gender=${form.gender.value}`,
                // 2. params 키를 이용하는 경우
                // url : "/axios", 
                // params : data, // params
            }).then(function (res) {
                console.log("axios get res : ", res); //서버의 응답 결과를 부가적인 정보와 함께 출력
                console.log(res.data); // index.js 의 res.send(req.query) 그 데이터가 담김
                // console.log(res.status); // HTTP Status code(상태코드)

                const { name, gender } = res.data; // { name: 'yejin', gender: '여자'}
                resultBox.textContent = `GET /axios 요청에 대한 응답 완료! \n ${name} 님은 ${gender} 이다.`;
                resultBox.style.color = 'pink';
            }).catch(function (err) {
                console.error('Error', err);
                resultBox.textContent = '앗 ! 알수없는 에러 발생 '
            })
        }
    }
    function axiosPost() {
        console.log("axiosPost() clicked");
        const form = document.forms['register'];

        const data = {
            name: form.name.value,
            gender: form.gender.value
        };
        axios({
            method: "post",
            url: '/axios',
            data, // data:data // POST 요청이 아닌 요청들은 모두 data 키에 정보를 실어서 보내야 한다.
        }).then((res) => {
            console.log(res); //서버의 응답 결과를 부가적인 정보와 함께 출력
            const { name, gender } = res.data; // { name: 'yejin', gender: '여자'}
            resultBox.textContent = `POST /axios 요청에 대한 응답 완료! \n ${name} 님은 ${gender} 이다.`;
            resultBox.style.color = 'pink';
        }).catch(function (err) {
            console.error('Error', err);
            resultBox.textContent = '앗 ! 알수없는 에러 발생 '
        })
    }

    //  fetch  : promise 형태 fetch 가 json을 js obj 로 자동 변환한다. 

    function fetchGet() {
        console.log("fetchGet() clicked");
        const form = document.forms['register'];
        const urlQuery = `?name=${form.name.value}&gender=${form.gender.value}`

        //fetch() 는 get 방식이 default 이다
        // fetch(`fetch${urlQuery} , {method : 'GET'}`)
        fetch(`fetch${urlQuery}`)
            .then((res) => {
                console.log(res);
                return res.json(); // res 객체로 부터 JSON 포맷의 응답을 js obj 로 변환 (자동 변환이 안되기 때문에)
            })
            .then((data) => {
                console.log(data); //js obj
                resultBox.textContent = `GET /fetch 요청에 대한 응답 완료! \n ${data.name} 님은 ${data.gender} 이다.`;
                resultBox.style.color = 'orange';
            })
    }


    function fetchPost() {
        console.log("fetchPost() clicked");
        const form = document.forms['register'];


        const data = {
            name: form.name.value,
            gender: form.gender.value
        };
        //fetch : POST 요청시 headers 옵션을 통해 JSON 포맷을 사용한다고 알려줘야 함.
        // => body에서도 json 형식으로 데이터를 바꾸어 보내야 함.
        fetch(`/fetch`, {
            method: "post",
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data), // js obj to json
        })
            .then((res) => {
                console.log(res); //서버의 응답 결과를 부가적인 정보와 함께 출력
                return res.json(); //res 객체로 부터 json 포맷의 응답을 js obj 로 변환

                resultBox.textContent = `POST /axios 요청에 대한 응답 완료! \n ${name} 님은 ${gender} 이다.`;
                resultBox.style.color = 'pink';
            })
            .then((data) => {
                console.log(data); //js obj
                resultBox.textContent = `POST /fetch 요청에 대한 응답 완료! \n ${data.name} 님은 ${data.gender} 이다.`;
                resultBox.style.color = 'orange';
            })

            .catch(function (err) {
                console.error('Error', err);
                resultBox.textContent = '앗 ! 알수없는 에러 발생 '
            })
    }


</script>